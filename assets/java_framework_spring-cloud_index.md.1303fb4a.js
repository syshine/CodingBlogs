import{_ as e,o,c as a,O as r}from"./chunks/framework.08728be1.js";const c="/CodingBlogs/assets/component.337412e7.jpg",m=JSON.parse('{"title":"新版本","description":"","frontmatter":{},"headers":[],"relativePath":"java/framework/spring-cloud/index.md","filePath":"java/framework/spring-cloud/index.md","lastUpdated":1712763671000}'),d={name:"java/framework/spring-cloud/index.md"},t=r('<h2 id="springcloud核心组件" tabindex="-1">SpringCloud核心组件: <a class="header-anchor" href="#springcloud核心组件" aria-label="Permalink to &quot;SpringCloud核心组件:&quot;">​</a></h2><p><code>Eureka</code>:服务启动时,Eureka会将服务注册到EurekaService,并且EurakeClient还可以返回过来从EurekaService拉取注册表,从而知道服务在哪里</p><p><code>Ribbon</code>:服务间发起请求的时候,基于Ribbon服务做到负载均衡,从一个服务的对台机器中选择一台</p><p><code>Feign</code>:基于fegin的动态代理机制,根据注解和选择机器,拼接Url地址,发起请求</p><p><code>Hystrix</code>:发起的请求是通过Hystrix的线程池来走,不同的服务走不同的线程池,实现了不同的服务调度隔离,避免服务雪崩的问题</p><p><code>Zuul</code>:如果前端后端移动端调用后台系统,统一走zuul网关进入,有zuul网关转发请求给对应的服务</p><p>Spring Cloud的5个核心组件通过一张图串联起来 <img src="'+c+'" alt="组件串联图"><a href="https://zhuanlan.zhihu.com/p/365477753" target="_blank" rel="noreferrer">参考地址</a></p><h1 id="新版本" tabindex="-1">新版本 <a class="header-anchor" href="#新版本" aria-label="Permalink to &quot;新版本&quot;">​</a></h1><p>2022.0.x</p><p><code>Netflix Eureka Server</code> 代替 <code>Eureka</code></p><p><code>OpenFeign</code> 代替 <code>Feign</code></p><p><code>Gateway</code> 代替 <code>Zull</code></p><p><code>Spring Cloud Circuit Breaker</code> 代替 <code>Hystrix</code></p><p><code>Gateway</code>和<code>OpenFeign</code>都有负载均衡</p>',14),n=[t];function i(p,s,l,u,_,h){return o(),a("div",null,n)}const f=e(d,[["render",i]]);export{m as __pageData,f as default};
