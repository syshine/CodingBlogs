import{_ as s,o as a,c as l,O as n}from"./chunks/framework.08728be1.js";const d=JSON.parse('{"title":"分页","description":"","frontmatter":{},"headers":[],"relativePath":"database/mysql/pagination.md","filePath":"database/mysql/pagination.md","lastUpdated":1700194465000}'),o={name:"database/mysql/pagination.md"},p=n(`<h1 id="分页" tabindex="-1">分页 <a class="header-anchor" href="#分页" aria-label="Permalink to &quot;分页&quot;">​</a></h1><h2 id="常规" tabindex="-1">常规 <a class="header-anchor" href="#常规" aria-label="Permalink to &quot;常规&quot;">​</a></h2><div class="language-sql"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#F78C6C;">SELECT</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">FROM</span><span style="color:#A6ACCD;"> table_name </span><span style="color:#F78C6C;">LIMIT</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">20</span><span style="color:#A6ACCD;"> OFFSET </span><span style="color:#F78C6C;">50</span></span></code></pre></div><p>LIMIT和OFFSET的具体含义和用法，</p><ul><li>LIMIT X表示：读取X条数据。</li><li>LIMIT X, Y表示：跳过X条数据，读取Y条数据。</li><li>LIMIT Y OFFSET X表示：跳过X条数据，读取Y条数据。</li></ul><p>当数据库里的数据量超过服务器内存能够存储的能力，并且需要对所有数据进行分页，问题就会出现，为了实现分页，每次收到分页请求时，数据库都需要进行低效的全表遍历。</p><h2 id="覆盖索引优化" tabindex="-1">覆盖索引优化 <a class="header-anchor" href="#覆盖索引优化" aria-label="Permalink to &quot;覆盖索引优化&quot;">​</a></h2><div class="language-sql"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#F78C6C;">SELECT</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">FROM</span><span style="color:#A6ACCD;"> (</span><span style="color:#F78C6C;">SELECT</span><span style="color:#A6ACCD;"> id </span><span style="color:#F78C6C;">FROM</span><span style="color:#A6ACCD;"> table_name </span><span style="color:#F78C6C;">LIMIT</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">3400000</span><span style="color:#A6ACCD;">,</span><span style="color:#F78C6C;">20</span><span style="color:#A6ACCD;">) a</span></span>
<span class="line"><span style="color:#F78C6C;">LEFT JOIN</span><span style="color:#A6ACCD;"> table_name b </span><span style="color:#F78C6C;">ON</span><span style="color:#A6ACCD;"> a.id </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> b.id;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">#或者是</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F78C6C;">SELECT</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">FROM</span><span style="color:#A6ACCD;"> table_name a</span></span>
<span class="line"><span style="color:#F78C6C;">INNER JOIN</span><span style="color:#A6ACCD;"> (</span><span style="color:#F78C6C;">SELECT</span><span style="color:#A6ACCD;"> id </span><span style="color:#F78C6C;">FROM</span><span style="color:#A6ACCD;"> table_name </span><span style="color:#F78C6C;">LIMIT</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">3400000</span><span style="color:#A6ACCD;">,</span><span style="color:#F78C6C;">20</span><span style="color:#A6ACCD;">) b </span><span style="color:#F78C6C;">USING</span><span style="color:#A6ACCD;"> (id);</span></span></code></pre></div><p>因此，针对LIMIT和OFFSET的分页，</p><ul><li>数据量大的时候不能使用OFFSET/LIMIT来进行分页，因为OFFSET越大，查询时间越久。</li><li>当然不能说所有的分页都不可以，如果你的数据就那么几千、几万条，那就很无所谓，随便使用。</li><li>如果我们的表没有主键，例如是具有多对多关系的表，那么就使用传统的OFFSET/LIMIT方式。</li><li>这种方法适用于要求ID为数值类型，并且查出的数据ID连续的场景且不能有其他字段的排序。</li></ul>`,10),e=[p];function t(C,c,r,i,y,A){return a(),l("div",null,e)}const D=s(o,[["render",t]]);export{d as __pageData,D as default};
