import{_ as s,o as a,c as n,O as l}from"./chunks/framework.08728be1.js";const h=JSON.parse('{"title":"多线程","description":"","frontmatter":{},"headers":[],"relativePath":"java/multhread.md","filePath":"java/multhread.md","lastUpdated":1712763671000}'),o={name:"java/multhread.md"},e=l(`<h1 id="多线程" tabindex="-1">多线程 <a class="header-anchor" href="#多线程" aria-label="Permalink to &quot;多线程&quot;">​</a></h1><h2 id="简单使用" tabindex="-1">简单使用 <a class="header-anchor" href="#简单使用" aria-label="Permalink to &quot;简单使用&quot;">​</a></h2><div class="language-java"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">//匿名内部类创建多线程</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">Thread</span><span style="color:#89DDFF;">(){</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">@</span><span style="color:#C792EA;">Override</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">void</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">run</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    System</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">out</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">println</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">Thread</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">currentThread</span><span style="color:#89DDFF;">().</span><span style="color:#82AAFF;">getName</span><span style="color:#89DDFF;">()+</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">创建新线程1</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}.</span><span style="color:#82AAFF;">start</span><span style="color:#89DDFF;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">//使用Lambda表达式，实现多线程</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">Thread</span><span style="color:#89DDFF;">(()</span><span style="color:#C792EA;">-&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  System</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">out</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">println</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">Thread</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">currentThread</span><span style="color:#89DDFF;">().</span><span style="color:#82AAFF;">getName</span><span style="color:#89DDFF;">()+</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">创建新线程2</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#89DDFF;">}).</span><span style="color:#82AAFF;">start</span><span style="color:#89DDFF;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">//优化Lambda</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">Thread</span><span style="color:#89DDFF;">(()</span><span style="color:#C792EA;">-&gt;</span><span style="color:#A6ACCD;"> System</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">out</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">println</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">Thread</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">currentThread</span><span style="color:#89DDFF;">().</span><span style="color:#82AAFF;">getName</span><span style="color:#89DDFF;">()+</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">创建新线程3</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">)).</span><span style="color:#82AAFF;">start</span><span style="color:#89DDFF;">();</span></span></code></pre></div><h2 id="标题2-2" tabindex="-1">标题2.2 <a class="header-anchor" href="#标题2-2" aria-label="Permalink to &quot;标题2.2&quot;">​</a></h2><h3 id="标题2-2-3-1" tabindex="-1">标题2.2.3.1 <a class="header-anchor" href="#标题2-2-3-1" aria-label="Permalink to &quot;标题2.2.3.1&quot;">​</a></h3><h3 id="标题2-2-3-2" tabindex="-1">标题2.2.3.2 <a class="header-anchor" href="#标题2-2-3-2" aria-label="Permalink to &quot;标题2.2.3.2&quot;">​</a></h3><h3 id="标题2-2-3-3" tabindex="-1">标题2.2.3.3 <a class="header-anchor" href="#标题2-2-3-3" aria-label="Permalink to &quot;标题2.2.3.3&quot;">​</a></h3><h2 id="标题2-3" tabindex="-1">标题2.3 <a class="header-anchor" href="#标题2-3" aria-label="Permalink to &quot;标题2.3&quot;">​</a></h2><h3 id="标题2-3-3-1" tabindex="-1">标题2.3.3.1 <a class="header-anchor" href="#标题2-3-3-1" aria-label="Permalink to &quot;标题2.3.3.1&quot;">​</a></h3><h3 id="标题2-3-3-2" tabindex="-1">标题2.3.3.2 <a class="header-anchor" href="#标题2-3-3-2" aria-label="Permalink to &quot;标题2.3.3.2&quot;">​</a></h3>`,10),p=[e];function t(r,c,F,D,y,i){return a(),n("div",null,p)}const d=s(o,[["render",t]]);export{h as __pageData,d as default};
